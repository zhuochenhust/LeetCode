关于Tree的一些思考：
1. 前中后序遍历的应用是什么？
	1.1 前序遍历：(实现：Solution 144)DFS 用前序遍历实现
	1.2 后序遍历：(实现：Solution 145)统计某个文件夹的大小（该文件夹下所有文件的大小）–用后序遍历实现
	1.3 中序遍历：(实现：Solution 94)二分查找树中node的val按从小到大排列就用到中序遍历，比如：230. Kth Smallest Element in a BST
2. 前序遍历其实就是DFS，那么顺便总结下DFS和BFS
	2.1 DFS:数据结构：栈, 父节点入栈，父节点出栈，先右子节点入栈，后左子节点入栈。遍历全部节点即可
	2.2 BFS:数据结构：队列, 父节点入队，父节点出队列，先左子节点入队，后右子节点入队。遍历全部节点即可，和102题一模一样。
	那我自己顺便简单实现一下DFS和BFS, 见BinaryTreeSearch.java
	
3. 解题思路：
	3.1 递归：Tree的题目是很容易用到递归的
	
	
4. 常见问题：
	4.1 求二叉树深度(最大深度：见Solution 110, 最小深度： 见Solution 111)
	4.2 DFS，BFS实现(见BinaryTreeSearch，用stack实现DFS，用queue实现BFS，见114，递归同样可以实现)
	
5. 难理解的题目：
	* 96. Unique Binary Search Trees: 一般只要你返回数量，不让你返回每种具体结构是什么，一般想想动态规划
	* 124. Binary Tree Maximum Path Sum
	* 687. Longest Univalue Path (124 和 687有类似的地方)
	* 297. Serialize and Deserialize Binary Tree

6. 很有启发的题目：
	* 110. Balanced Binary Tree， 
	  > 迭代法（Iteration），用循环：用BFS或者DFS遍历每一个节点，看每一个node是否左left的深度和right深度差距不大于1，
	    当然需要写一个递归方法findMaxDepth。
	  > 递归法（Recursion）：这是一种改进，同样也需要写一个求深度的递归方法findMaxDepth，但是非常巧妙地是，在求深度的同时，我们就判断他平不平衡，不平衡返回-1，平衡才正常返回，这是非常巧妙的。
	* 235. Lowest Common Ancestor of a Binary Search Tree
	  > 递归法空间复杂度O(log(N))~O(N)
	  > Iteration 空间复杂度O(1)
	* 105, 106, 654
	  > 每次递归用到数组的一部分，不要想着去每次用Arrays.copyOfRange创建新的数组，而是要在递归函数中加入左右边界参数，这样不会每次递归浪费额外空间创建新数组
	* 235, 236 类似，一个是求二分查找树的两个节点的最小祖先，一个是求普通二叉树的两个节点的最小祖先
	* 222. Count Complete TreeNodes 这题无脑递归复杂度太高，要应用complete tree的性质来降低复杂度
	* 116. Populating Next Right Pointers in Each Node, 既可以BFS循环做也可以递归做，递归做很有意思
	* 257. Binary Tree Paths 
	  > 像这种涉及列出所有情况的字符串问题，首先想到递归没问题，然后是选择用“+”进行字符串拼接还是用StringBuilder。
      > 用StringBuilder是必回溯的，也就是有个类似sb.deleteCharAt(sb.length() - 1)这个过程
      > 这道题不能用sb.deleteCharAt(sb.length() - 1)回溯，因为有时候拼接 “->” ,有时候拼接数字比如“1”
      > 所以用sb.setLength(original_length)来删除本次拼接的内容达到回溯的效果
      > 为什么用"sb"和“append()"就要回溯，用"字符串"和"+"就不需要回溯呢？这个问题我想了很久，终于想出来了
      	>> 因为用“字符串”和“+”做字符串拼接，String str = "a" + "b"方法实际上是str = new StringBuilder("a").append("b").toString() 实现的。
      	>> 这样一来，用“+”实现字符串拼接的方式，每次执行helper()的时候，内部其实都创建了一个新的StringBuilder对象，开辟了新的内存空间
      	>> 所以每次“+”拼接都相当于是修改在本层递归调用helper()的时候的path，不影响外层helper()的path。
      	>> 所以每次return出来到上一层helper()的时候，上一层helper()创建的path根本没变，相当于自动的回溯了，不需要再手动回溯
      	-------------------------------------------------------------------------------------------------
      	>> 而对于用StringBuilder sb和append来实现字符串拼接的时候，sb一直是那个最开始创建的sb，所以每次修改了他的内容必须手动回溯
      	>> 这就是为什么但凡用StringBuilder回溯，就得手动sb.deleteCharAt(sb.length() - 1), 以及这题里面用到的sb.setLength(original_length)
      	>> 即将sb还原到上一层的长度的状态，删除掉本层helper()新加上去的内容，达到回溯的目的
      	>> 如果不想手动自己写回溯，那就可以把helper里的sb.append(root.val)写成sb = new StringBuilder(sb).append(root.val);
      	>> 但是这样做使用StringBuilder的意义就没了，浪费额外空间和时间。
     * 437. Path Sum III
     * 979. Distribute Coins in Binary Tree
     * 250. Count Univalue Subtrees
     * 538. Convert BST to Greater Tree
     * 637. Average of Levels in Binary Tree 题目本身和102差不多，但是注意代码注释的内容，小细节很容易出错
	
7. 复杂度
	* 一般只要涉及到遍历整个树，不论是DFS还是BFS，时间复杂度都是O(N)
	* 一般数都涉及到遍历整个树，比如100题SameTree，用了递归，递归所需空间复杂度是递归最大深度*每次递归所需辅助空间个数，最差的情况Tree完全不平衡，空间复杂度就是O(N)，因为每一层一个node，最差情况N个node全部都要存在递归开辟的stack里，空间复杂度位O(N)，
	   但是如果是最好的情况，一个完全平衡的二叉树，复杂度就是O(log(N)
