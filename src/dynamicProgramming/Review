1. 难理解的题目：
   * 123. Best Time to Buy and Sell Stock III (难理解)
     这道题是Best Time to Buy and Sell Stock的扩展，现在我们最多可以进行两次交易。
     我们仍然使用动态规划来完成，事实上可以解决非常通用的情况，也就是最多进行k次交易的情况。
     这里我们先解释最多可以进行k次交易的算法，然后最多进行两次我们只需要把k取成2即可。
     我们还是使用“局部最优和全局最优解法”。我们维护两种量，一个是当前到达第i天可以最多进行j次交易，
     最好的利润是多少（global[i][j]），另一个是当前到达第i天，最多可进行j次交易，
     并且最后一次交易在当天卖出的最好的利润是多少（local[i][j]）。下面我们来看递推式，全局的比较简单，
     global[i][j]=max(local[i][j],global[i-1][j])，
     也就是去当前局部最好的，和过往全局最好的中大的那个（因为最后一次交易如果包含当前天一定在局部最好的里面，
     否则一定在过往全局最优的里面）。对于局部变量的维护，递推式是
     local[i][j]=max(global[i-1][j-1]+max(diff,0),local[i-1][j]+diff)，
     也就是看两个量，第一个是全局到i-1天进行j-1次交易，然后加上今天的交易，如果今天是赚钱的话（
     也就是前面只要j-1次交易，最后一次交易取当前天），第二个量则是取local第i-1天j次交易，
     然后加上今天的差值（这里因为local[i-1][j]比如包含第i-1天卖出的交易，所以现在变成第i天卖出，
     并不会增加交易次数，而且这里无论diff是不是大于0都一定要加上，因为否则就不满足local[i][j]必须在最后一天卖出的条件了）。
     上面的算法中对于天数需要一次扫描，而每次要对交易次数进行递推式求解，
     所以时间复杂度是O(n*k)，如果是最多进行两次交易，那么复杂度还是O(n)。
     空间上只需要维护当天数据皆可以，所以是O(k)，当k=2，则是O(1)。 


2. 很有启发的题目：
   * 53. Maximum Subarray:
     > current elemrnt:     [-2, 1, -3, 4, -1, 2, 1, -5, 4] (原始nums[i])
     > current max sum:     [-2, 1, -2, 4,  3, 5, 6,  1, 5]（if(nums[i-1]>0) nums[i]+=nums[i-1]之后的nums[i]）
     > max sum seen so far: [-2, 1,  1, 4,  4, 5, 6,  6, 6]（maxSum）
   * 5. Longest Palindromic Substring 也可以用DP来做，这道题在palindrome包中
     > dp[i][j]表示从i到j的字符串是否是回文串
     > 若s[i] == s[j]，是否回文取决于dp[i + 1][j - 1]
     > 若s[i] != s[j]，dp[i][j]直接就是false
     > dp的进行是按字符串长度从1～n推进的
   * 96. Unique Binary Search Trees 树的动归，在tree包中
   * 338. Counting Bits
     > 转移方程比较有启发性
     > 小tips: x / 2 is x >> 1 and x % 2 is x & 1
   * 139. Word Break
     > 用到了三种方法：暴力递归，备忘录递归（自顶向下dp），动态规划（自底向上）
   * 152. Maximum Product Subarray
   	 > 典型dp: 利用dp数组
   	 > 优化dp: 不用dp数组，深入理解dp核心本质，降低空间复杂度
   	        > 通过观察状态转移函数，我们可以看出，每次计算只是用到前一个maxhere和minhere，
   	          所以这里可以对程序进行改进，每次对前一个maxhere和minhere做记录，这样就节省了空间的存储。
   * 279. Perfect Squares
     > 关于完全平方数的dp，有点启发
   * 120. Triangle
     > 二维dp数组应用

3. 一些重点
   * 常见步骤：1. 构建dp数组 2. 初始化 3. 转移方程 参考典型题目：70. Climbing Stairs
   * 不是每一个dp问题都是一个数组，都是返回数组最后一位的，dp的思想只是记录之前的状态而减少暴力递归的复杂度，甚至不是每一个dp都需要数组
     > 152. Maximum Product Subarray
   * 不是每一个dp数组都是一位数组：120. Triangle; 64. Minimum Path Sum
